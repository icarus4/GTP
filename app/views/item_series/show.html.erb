<div>
  <div class="col-md-4">
    <dl class="dl-horizontal">
      <dt>商品系列名稱</dt><dd><%= @item_series.name %></dd>
      <dt>製造商</dt><dd><%= @item_series.manufacturer.name %></dd>
      <dt>品牌</dt><dd><%= @item_series.brand.name %></dd>
      <dt>儲運條件</dt><dd><%= @item_series.storage_and_transport_condition_in_chinese %><%= "(#{@item_series.storage_and_transport_condition_note})" if @item_series.storage_and_transport_condition == 'other' %></dd>
      <dt>最後修改時間</dt><dd><%= time_ago_in_words(@item_series.updated_at) %> ago</dd>
    </dl>
  </div>

  <div class="col-md-4">
    <dl class="dl-horizontal">
      <dt>商品原材料</dt><dd><%= @item_series.raw_material %></dd>
      <dt>主副原料</dt><dd><%= @item_series.main_and_auxiliary_material %></dd>
      <dt>食品添加物</dt><dd><%= @item_series.food_additives %></dd>
      <dt>警語</dt><dd><%= @item_series.warnings %></dd>
    </dl>
  </div>

  <div class="col-md-4">
    <dl class="dl-horizontal">
      <dt>過期警告天數</dt><dd><%= @item_series.expiration_alert_days ? "#{@item_series.expiration_alert_days} 天前" : '無' %></dd>
    </dl>
  </div>
</div>

<div id="item-table">
  <div class="table-container">
    <table class="table table-hover">
      <thead>
        <tr>
          <th class="col-sm-1">名稱</th>
          <th class="col-sm-1">SKU</th>
          <th class="col-sm-1">包裝規格</th>
          <th class="col-sm-1">買進價</th>
          <th class="col-sm-1">批發價</th>
          <th class="col-sm-1">零售價</th>
          <th class="col-sm-1">單位庫存成本</th>
          <th class="col-sm-1">可用數量</th>
          <th class="col-sm-2">在庫數量</th>
          <th class="col-sm-1">低庫存警示量</th>
          <th class="col-sm-1">狀態</th>
        </tr>
      </thead>
      <tbody>
        <!-- Existing items -->
        <tr
          v-for="item in items"
          class="cursor-pointer"
          @click="redirectToItemPage(item.id)">
          <td class="col-sm-1">{{ item.name }}</td>
          <td class="col-sm-1">{{ item.sku }}</td>
          <td class="col-sm-1">
            {{ item.weight_value }} {{ item.weight_unit }} / {{ item.packaging_type.name }}
          </td>
          <td class="col-sm-1">{{ item.purchase_price }}</td>
          <td class="col-sm-1">{{ item.wholesale_price }}</td>
          <td class="col-sm-1">{{ item.retail_price }}</td>
          <td class="col-sm-1">{{ item.cost_per_unit }}</td>
          <td class="col-sm-1">{{ item.available_count }}</td>
          <td class="col-sm-2">
            {{ item.on_hand_count }}
            <ul class="list-unstyled">
              <li v-for="pack in item.packs">
                <small class="text-muted"><i class="fa fa-arrow-right"></i> {{ (item.on_hand_count / pack.size).toFixed(2) }} {{ pack.name }} (每{{pack.name + pack.size}}個)</small>
              </li>
            </ul>
          </td>
          <td class="col-sm-1">{{ item.low_stock_alert_level }}</td>
          <td class="col-sm-1">{{ item.status }}</td>
        </tr>
      </tbody>
    </table>
  </div>

  <div>
    <input id="item-series-id" type="hidden" value="<%= @item_series.id %>">
    <button class="btn btn-default btn-md" @click="setupNewItemForm" data-toggle="modal" data-target="#new-item-modal">新增商品</button>
  </div>

  <%= render 'new_item_modal' %>
  <%= render 'common/vue_data' %>

</div>

<% content_for :js do %>
<script type="text/javascript">
new Vue({
  el: "#item-table",
  data: {
    item_series_id: null,
    itemTemplate: {
      name: null,
      sku: null,
      purchase_price: null,
      wholesale_price: null,
      retail_price: null,
      cost_per_unit: null,
      on_hand_count: null,
      item_details: [],
      low_stock_alert_level: null,
      packaging_type_id: null,
      weight_value: null,
      weight_unit: 'g',
      price_lists: [],
      packs: [{}],
    },
    itemDetailTemplate: {
      on_hand_count: null,
      expiry_date: null,
      location_id: null,
      bin_location_id: null,
    },
    options: {
      locations: [],
      packaging_types: [],
    },
    items: [],
    new_item: {},
  },
  created: function() {
    this.setupItemSeriesId()
  },
  ready: function() {
    this.getItemList()
    this.getPriceList()
  },
  watch: {
    'new_item.packable': function(val, oldVal) {
      if (val === false && oldVal === true) {
        this.new_item.packs = [] // Empty array
      }
    }
  },
  methods: {
    setupItemSeriesId: function() {
      this.item_series_id = $("input#item-series-id").val()
    },
    getItemList: function() {
      var that = this
      $.ajax({
        url: "/api/v1/item_series/" + that.item_series_id + "/items"
      }).done(function(data) {
        that.items = data.items
      })
    },
    getLocationOptions: function() {
      var that = this
      $.ajax({
        url: "/api/v1/locations/holds_stock"
      }).done(function(data) {
        that.options.locations = data.locations
      }).fail(function(err) {
        console.log(err)
      })
    },
    setupNewItemForm: function() {
      // Load packaging types
      if (this.options.packaging_types.length === 0) {
        this.getPackagingTypeOptions()
      }
      // Load locations
      if (this.options.locations.length === 0) {
        this.getLocationOptions()
      }
      // Setup default value of the new item
      if (typeof this.new_item.name === "undefined") {
        this.new_item = _.cloneDeep(this.itemTemplate)
        // If any item exists within current item series, copy the last item's value to the new item
        if (this.items.length > 0) {
          var last_item = this.items.slice(-1)[0]
          this.new_item.name                  = last_item.name
          this.new_item.sku                   = last_item.sku
          this.new_item.purchase_price        = last_item.purchase_price
          this.new_item.wholesale_price       = last_item.wholesale_price
          this.new_item.retail_price          = last_item.retail_price
          this.new_item.cost_per_unit         = last_item.cost_per_unit
          this.new_item.low_stock_alert_level = last_item.low_stock_alert_level
          this.new_item.packaging_type_id     = last_item.packaging_type_id
          this.new_item.weight_unit           = last_item.weight_unit
          this.new_item.weight_value          = last_item.weight_value
        }
      }
      // Add item details to the new item
      if (this.new_item.item_details.length === 0) {
        this.addNewItemDetail()
      }
    },
    getPackagingTypeOptions: function() {
      var that = this
      $.ajax({
        url: "/api/v1/packaging_types",
        method: "GET",
        dataType: "json"
      }).done(function(data) {
        that.options.packaging_types = data.packaging_types
      })
    },
    getPriceList: function() {
      var that = this
      $.ajax({
        url: "/api/v1/price_lists",
        method: "GET",
        dataType: "json"
      }).done(function(data) {
        // that.options.price_lists = data.price_lists
        that.itemTemplate.price_lists = data.price_lists
      }).fail(function(err) {
        console.log(err.responseJSON.errors)
      })
    },
    submitItemForm: function() {
      var that = this
      $.ajax({
        url: "/api/v1/item_series/" + that.item_series_id + "/items",
        method: "POST",
        dataType: "json",
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        data: that.new_item
      }).done(function(data) {
        that.items.push(data.item)
        that.new_item = {}
      }).fail(function(err) {
        console.log(err)
        alert(err.responseJSON.errors)
      })
    },
    findBinLocationsByLocationId: function(location_id) {
      if (location_id == "") {
        return []
      }
      else {
        var selected_location = _.find(this.options.locations, function(location) {
          return location.id == location_id
        })
        return selected_location.bin_locations
      }
    },
    addNewItemDetail: function() {
      this.new_item.item_details.push(_.cloneDeep(this.itemDetailTemplate))
    },
    resetBinLocation: function(item_detail) {
      item_detail.bin_location_id = ""
    },
    removeItemDetail: function(item_detail) {
      this.new_item.item_details.$remove(item_detail)
    },
    redirectToItemPage: function(item_id) {
      window.location.href = "/items/" + item_id
    },
    addNewPackToNewItem: function() {
      this.new_item.packs.push({})
    }
  }
})
</script>
<% end %>
