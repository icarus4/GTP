<template id="app">
  <div class="col-md-9">
    <div class="row">

      <div class="col-md-12">
        <!-- 客戶 -->
        <div class="col-md-offset-1">
          <customer-selector
            :customers="$store.state.options.customers"
            :customer="sales_order && sales_order.partner"
            :mode="mode"
            :error_message="($store.state.sales_order.errors && $store.state.sales_order.errors.partner_id) || null">
          </customer-selector>

          <div>
            <div><label>狀態</label><span class="m-l">{{ sales_order.status }}</span></div>
            <div><label>訂單編號</label><span class="m-l">{{ sales_order.order_number }}</span></div>
          </div>
        </div>

        <div class="pull-right" v-if="sales_order && mode === 'show'">
          <button v-if="sales_order.shipment_status === 'shipped'" @click="deleteShipment" class="btn btn-default m-l-xs">刪除出貨</button>
          <button v-if="sales_order.status !== 'void' && sales_order.status !== 'deleted'" @click="openPickListPage" class="btn btn-default m-l-xs">顯示撿貨單</button>
          <button v-if="order_editable" @click="editOrder" class="btn btn-default m-l-xs">編輯</button>
          <button v-if="sales_order.status === 'finalized' || sales_order.status === 'fulfilled'" @click="voidOrder" class="btn btn-default m-l-xs">作廢此單</button>
          <button v-if="sales_order.status === 'draft' || sales_order.status === 'active'" @click="deleteOrder" class="btn btn-default m-l-xs">刪除</button>
        </div>
      </div>

      <div class="col-md-12"><hr></div>

      <div class="col-md-4">
        <div class="row">
          <!-- 客戶單據寄送至 -->
          <bill-to-location-selector
            :locations="$store.state.options.customer_locations"
            :location="sales_order && sales_order.bill_to_location"
            after-selected-dispatch-event="billToLocationSelected"
            label="單據寄送至"
            :is_editing="is_editing"
            :error_message="($store.state.sales_order.errors && $store.state.sales_order.errors.bill_to_location_id) || null">
          </bill-to-location-selector>
        </div>
        <div class="row">
          <!-- 客戶貨品寄送至 -->
          <ship-to-location-selector
            :locations="$store.state.options.customer_locations"
            :location="sales_order && sales_order.ship_to_location"
            after-selected-dispatch-event="shipToLocationSelected"
            label="貨品寄送至"
            :is_editing="is_editing"
            :error_message="($store.state.sales_order.errors && $store.state.sales_order.errors.ship_to_location_id) || null">
          </ship-to-location-selector>
        </div>
        <div class="row">
          <!-- 出貨倉庫 -->
          <ship-from-location-selector
            :locations="$store.state.options.stockable_locations"
            :location="sales_order && sales_order.ship_from_location"
            after-selected-dispatch-event="shipFromLocationSelected"
            label="出貨倉庫"
            :is_editing="ship_from_location_can_edit"
            :error_message="($store.state.sales_order.errors && $store.state.sales_order.errors.ship_from_location_id) || null">
          </ship-from-location-selector>
        </div>

        <div class="row">
          <div class="col-md-4 form-group">
            <label class="pull-right">電話</label>
          </div>
          <div class="col-md-8 form-group">
            <span>
              <input v-if="is_editing" type="text" @input="updatePhone" v-model="sales_order.phone" class="form-control input-sm">
              <span v-else>{{ sales_order.phone }}</span>
            </span>
          </div>
        </div>

      </div>

      <div class="col-md-4">
        <div class="form-group">
          <label>訂單日期</label>
          <span class="m-l">
            <input v-if="is_editing" type="date" @change="updateIssuedOn" v-model="sales_order.issued_on">
            <span v-else>{{ sales_order.issued_on }}</span>
          </span>
          <span v-if="$store.state.sales_order.errors && $store.state.sales_order.errors.issued_on" class="text-danger">{{ $store.state.sales_order.errors.issued_on }}</span>
        </div>

        <div class="form-group">
          <label>送貨日期</label>
          <span class="m-l">
            <input v-if="is_editing" type="date" @change="updateExpectedDeliveryDate" v-model="sales_order.expected_delivery_date">
            <span v-else>{{ sales_order.expected_delivery_date }}</span>
          </span>
          <span v-if="$store.state.sales_order.errors && $store.state.sales_order.errors.expected_delivery_date" class="text-danger">{{ $store.state.sales_order.errors.expected_delivery_date }}</span>
        </div>

        <div class="form-group">
          <label>Email</label>
          <span class="m-l">
            <input v-if="is_editing" type="text" @input="updateEmail" v-model="sales_order.email">
            <span v-else>{{ sales_order.email }}</span>
          </span>
        </div>

        <div class="form-group">
          <label>經辦人</label>
          <span class="m-l">
            <select v-if="is_editing" @change="updateAssignee" v-model="sales_order.assignee_id">
              <option selected value="">-- 請選擇經辦人 --</option>
              <option
                v-for="employee in $store.state.options.employees"
                v-bind:value="employee.id">{{ employee.name }}</option>
            </select>
            <span v-else>{{ sales_order.assignee && sales_order.assignee.name }}</span>
          </span>
        </div>

      </div>
      <div class="col-md-4">
        <div class="form-group">
          <label>幣別</label>
          <span class="m-l" v-else>新台幣</span>
        </div>

        <div class="form-group">
          <label>價別</label>
          <select v-if="is_editing"><option disabled selected value="">-- WIP --</option></select>
          <span class="m-l" v-else>{{ "WIP" }}</span>
        </div>
        <div>
          <label>單價</label>
          <select v-if="is_editing" @change="updateTaxTreatment" v-model="sales_order.tax_treatment">
            <option selected value="exclusive">不含稅</option>
            <option value="inclusive">含稅</option>
          </select>
          <span class="m-l" v-else>{{ tax_treatment }}</span>
        </div>
      </div>

    </div>

    <div class="row"><hr></div>

    <div class="row">
      <line-item-selection-area
        :items="$store.state.options.items"
        :line_items="$store.state.sales_order_line_items"
        :mode="mode"
        :is_editing="is_editing">
      </line-item-selection-area>
    </div>

    <div class="row"><hr class="m-t-lg"></div>

    <div class="row m-t">
      <div class="col-md-6 m-t">
        <textarea v-if="is_editing" @input="updateNotes" v-model="sales_order.notes" placeholder="備註:" rows="4" class="form-control input-sm"></textarea>
        <div v-if="!is_editing && sales_order.notes" class="bg-warning">
          <label>備註:</label><p>{{ sales_order.notes }}</p>
        </div>
      </div>
      <div class="col-md-3 col-md-offset-3">
        <ul class="list-group no-padding">
          <li class="list-group-item">
            <span>數量合計</span>
            <span class="pull-right">{{ $store.getters.total_units }}</span>
          </li>
          <li class="list-group-item">
            <span>金額合計</span>
            <span class="pull-right">NT$ {{ $store.getters.subtotal }}</span>
          </li>
          <li class="list-group-item">
            <span>稅額</span>
            <span class="pull-right">NT$ {{ $store.getters.total_tax }}</span>
          </li>
          <li class="list-group-item">
            <span>金額總計</span>
            <span class="pull-right">NT$ {{ $store.getters.total_amount }}</span>
          </li>
        </ul>
      </div>
    </div>

    <div v-if="is_editing" class="row"><hr class="m-t-xs"></div>

    <div v-if="is_editing" class="row m-t">
      <div class="pull-right">
        <button class="btn btn-default">取消</button>
        <button v-if="mode === 'new'" class="btn btn-default" @click="createOrder('draft')">存為草稿</button>
        <button v-if="mode === 'new'" class="btn btn-primary" @click="createOrder('active')">建立出貨單</button>
        <button v-if="mode === 'edit'" class="btn btn-primary" @click="updateOrder">儲存</button>
      </div>
    </div>

  </div>

  <div v-if="mode === 'show'" class="col-md-3">
    <div class="col-md-12">
      <!-- 單號、狀態 -->
      <div class="row">
        <div class="ibox border-left-right border-bottom">
          <div class="ibox-title">
            <h5>單號 {{ sales_order.order_number }}</h5>
            <div class="pull-right">{{ sales_order.status }}</div>
          </div>
          <div v-if="sales_order.status === 'draft' || sales_order.status === 'active'" class="ibox-footer">
            <button v-if="sales_order.status === 'draft'" @click="approveOrder" class="btn btn-primary btn-block">批准訂單</button>
            <button v-if="sales_order.status === 'active'" @click="finalizeOrder" class="btn btn-primary btn-block">處理訂單</button>
          </div>
        </div>
      </div>

      <!-- 請款單 -->
      <div v-if="show_invoice_area" class="row">
        <div class="ibox border-left-right border-bottom">
          <div class="ibox-title">
            <h5>請款狀態</h5>
            <div class="pull-right">
              <span v-if="!is_invoiced" class="text-danger">${{ sales_order.uninvoiced_total_amount }} 待請款</span>
              <span v-else class='text-info'>已請款</span>
            </div>
          </div>
          <div class="ibox-content">
            <!-- Invoiced -->
            <div v-if="is_invoiced">
              <div v-for="iv in invoices">
                <span><a @click="openInvoicePage">請款單 ID: {{ iv.id }}</a></span>
                <span class="pull-right"><span class="label label-default">${{ iv.total_amount }}</span><a @click="deleteInvoice(iv.id)"><i class="fa fa-trash m-l"></i></a></span>
              </div>
            </div>
            <!-- Uninvoiced -->
            <div v-if="!is_invoiced">
              <div class="form-group">
                <label>請款日期</label>
                <input type="date" v-model="invoice.invoiced_on" class="m-l">
              </div>
              <div class="form-group">
                <label>收款條件</label>
                <select v-model="invoice.payment_term_id" class="m-l">
                  <option selected value="">-- 請選擇收款條件 --</option>
                  <option v-for="payment_term in options.payment_terms" v-bind:value="payment_term.id">{{ payment_term.name }}</option>
                </select>
              </div>
              <div class="form-group">
                <label>應收款日</label><input type="date" v-model="invoice.due_on" class="m-l">
              </div>
              <div class="form-group">
                <label>請款備註</label><input type="text" maxlength="256" v-model="invoice.notes" class="m-l">
              </div>
              <div>
                <button class="btn btn-primary btn-block" @click="invoiceAll">請款</button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- 應收帳款 -->
      <div v-if="show_payment_area" class="row">
        <div class="ibox border-left-right border-bottom">
          <div class="ibox-title">
            <h5>應收帳款狀態</h5>
            <div class="pull-right">
              <span v-if="!is_paid" class="text-danger">${{ sales_order.unpaid_total_amount }} 待收款</span>
              <span v-else class="text-info">已收款</span>
            </div>
          </div>
          <div class="ibox-content">

            <div v-if="!is_payable">
              <p>請先請款</p>
            </div>

            <div v-if="is_payable">
              <div>
                <div v-for="p in payments">
                  <div v-if="$index > 0" class="m-t-xs"></div><!-- 留間距 -->
                  <span><a>收款單 ID: {{ p.id }}</a></span>
                  <span class="pull-right"><span class="label label-default">${{ p.amount }}</span><a @click="deletePayment(p.id)"><i class="fa fa-trash m-l"></i></a></span>
                </div>
              </div>

              <hr v-if="any_payment_exists && !is_paid">

              <div v-if="!is_paid">
                <div class="form-group">
                  <label>收款方式</label>
                  <select v-model="payment.payment_method_id" class="m-l">
                    <option selected value="">-- 請選擇收款方式 --</option>
                    <option v-for="payment_method in options.payment_methods" v-bind:value="payment_method.id">{{ payment_method.name }}</option>
                  </select>
                </div>
                <div class="form-group">
                  <label>收款金額</label>
                  <input v-model="payment.amount" min="0" max="{{ sales_order.unpaid_total_amount }}" type="number" style="width: 153px" class="m-l">
                </div>
                <div class="form-group">
                  <label>收款日期</label>
                  <input v-model="payment.receipt_date" type="date" class="m-l">
                </div>
                <div class="form-group">
                  <label>轉入帳號</label>
                  <input v-model="payment.transfer_in_account" maxlength="32" type="text" class="m-l">
                </div>
                <div class="form-group">
                  <label>對方帳號</label>
                  <input v-model="payment.transfer_out_account" maxlength="32" type="text" class="m-l">
                </div>
                <div>
                  <button class="btn btn-primary btn-block" @click="createPayment">收款</button>
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>

      <!-- 出貨單 -->
      <div v-if="show_shipment_area" class="row">
        <div class="ibox border-left-right border-bottom">
          <div class="ibox-title">
            <h5>出貨狀態</h5>
            <div class="pull-right"><span class="{{ is_shipped ? 'text-info' : 'text-danger' }}">{{ shipment_status }}</span></div>
          </div>
          <div class="ibox-content">
            <button v-if="order_shippable" @click="shipAll" class="btn btn-primary btn-block">全部出貨</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<%= render 'components/sales_order/customer_selector' %>
<%= render 'components/sales_order/location_selector' %>
<%= render 'components/sales_order/line_item_selection_area' %>

<script type="text/javascript">
  var App = Vue.extend({
    template: '#app',
    components: {
      'customer-selector': CustomerSelector,
      'bill-to-location-selector': LocationSelector,
      'ship-to-location-selector': LocationSelector,
      'ship-from-location-selector': LocationSelector,
      'line-item-selection-area': LineItemSelectionArea,
    },
    props: {
      mode: String,
      sales_order_id: Number,
      sales_order: {
        type: Object,
        default: function() { return {} }
      },
      invoices: {
        type: Array,
        default: function() { return {} }
      },
    },
    data: function() {
      return {
        options: {
          payment_terms: [],
          payment_methods: []
        },
        invoice: {
          id: null,
          sales_order_id: null,
          payment_term_id: null,
          invoiced_on: null,
          due_on: null,
          payment_status: null,
          notes: null,
        },
        payment: {
          id: null,
          invoice_id: null,
          payment_method_id: null,
          receipt_date: null,
          transfer_in_account: null,
          transfer_out_account: null
        },
        payments: []
      }
    },
    computed: {
      is_editing: function() {
        return this.mode === 'new' || this.mode === 'edit'
      },
      ship_from_location_can_edit: function() {
        return this.mode === 'new'
      },
      tax_treatment: function() {
        if (this.sales_order.tax_treatment === 'exclusive') { return '不含稅' }
        else { return '含稅' }
      },
      show_shipment_area: function() {
        return this.sales_order.status === 'finalized' || this.sales_order.status === 'fulfilled'
      },
      order_shippable: function() {
        return this.sales_order.status === 'finalized' && this.sales_order.shipment_status === 'unshipped'
      },
      order_editable: function() {
        return this.sales_order.status === 'draft' || this.sales_order.status === 'active'
      },
      show_invoice_area: function() {
        this.getPaymentTermList()
        return this.sales_order.status === 'finalized' || this.sales_order.status === 'fulfilled'
      },
      is_invoiced: function() {
        return this.sales_order.invoice_status === 'invoiced'
      },
      show_payment_area: function() {
        this.getPaymentMethodList()
        this.getPayments()
        this.payment.receipt_date = moment().format('YYYY-MM-DD')
        this.payment.amount = this.sales_order.unpaid_total_amount
        return this.sales_order.status === 'finalized' || this.sales_order.status === 'fulfilled'
      },
      is_payable: function() {
        return this.sales_order.invoice_status === 'partial' || this.sales_order.invoice_status === 'invoiced'
      },
      any_payment_exists: function() {
        return this.payments.length > 0
      },
      is_paid: function() {
        return this.sales_order.payment_status === 'paid'
      },
      is_shipped: function() {
        return this.sales_order.shipment_status === 'shipped'
      },
      shipment_status: function() {
        var status = this.sales_order.shipment_status
        if (status === 'unshipped') {
          return '待出貨'
        }
        else if (status === 'shipped') {
          return '已出貨'
        }
        else {
          return '尚有部分未出貨'
        }
      }
    },
    created: function() {
      this.$store.commit('setupMode', this.mode)
    },
    ready: function() {
      if (this.mode === 'new' || this.mode === 'edit') {
        this.$store.dispatch('getCustomerList')
        this.$store.dispatch('getPriceList')
        this.$store.dispatch('getStockableLocationList')
        this.$store.dispatch('getItemList')
        this.$store.dispatch('getEmployeeList')
        this.$store.dispatch('addNewLineItem')
      }
      if (this.mode === 'new') {
        this.$store.commit('updateIssuedOn', moment().format('YYYY-MM-DD'))
        this.$store.commit('updateExpectedDeliveryDate', moment().format('YYYY-MM-DD'))
      }
      if (this.mode === 'show' || this.mode === 'edit') {
        this.getSalesOrder(this.sales_order_id)
      }
      if (this.mode === 'show') {
        this.getInvoices()
      }
    },
    methods: {
      updateIssuedOn: function(e) {
        this.$store.commit('updateIssuedOn', e.target.value)
      },
      updateExpectedDeliveryDate: function(e) {
        this.$store.commit('updateExpectedDeliveryDate', e.target.value)
      },
      updateEmail: function(e) {
        this.$store.commit('updateEmail', e.target.value)
      },
      updateAssignee: function(e) {
        this.$store.commit('updateAssignee', e.target.value)
      },
      updatePhone: function(e) {
        this.$store.commit('updatePhone', e.target.value)
      },
      updateTaxTreatment: function(e) {
        this.$store.commit('updateTaxTreatment', e.target.value)
      },
      updateNotes: function(e) {
        this.$store.commit('updateNotes', e.target.value)
      },
      createOrder: function(status) {
        this.$store.commit('updateStatus', status)
        this.$store.commit('validateForm')
        if (!this.$store.state.is_form_valid) { return }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders',
          method: 'POST',
          dataType: 'json',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          data: { sales_order: that.$store.state.sales_order, sales_order_line_items: that.$store.state.sales_order_line_items }
        }).done(function(data) {
          window.location.href = '/sales_orders/' + data.sales_order.id
        }).fail(function(err) {
          console.log(err)
          alert(err.responseJSON.errors)
          that.$broadcast('update-sellable-quantity') // 更新 line_item 的 sellable_quantity
        })
      },
      // Fetch specific sales order
      getSalesOrder: function(id) {
        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + id,
          method: 'GET',
          dataType: 'json',
        }).done(function(data) {
          var sales_order = data.sales_order
          sales_order.errors = {} // FIXME: Move errors to outside of sales_order ?
          that.$store.commit('setupSalesOrder', { sales_order: sales_order })
          that.getSalesOrderLineItems(data.sales_order.id)
          if (data.sales_order.invoice_status === 'uninvoiced') {
            that.invoice.invoiced_on = moment().format("YYYY-MM-DD")
          }
        }).fail(function(err) {
          console.log(err)
          alert('Cannot get sales order')
        })
      },
      getSalesOrderLineItems: function(sales_order_id) {
        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + sales_order_id + '/line_items',
          method: 'GET',
          dataType: 'json',
        }).done(function(data) {
          var sales_order_line_items = data.sales_order_line_items
          // FIXME: Move errors to outside of sales_order_line_item ?
          sales_order_line_items.forEach(function(line_item) {
            line_item.errors = {}
          })
          that.$store.commit('updateSalesOrderLineItems', { sales_order_line_items: data.sales_order_line_items })
        }).fail(function(err) {
          console.log(err)
          alert(err.responseJSON)
        })
      },
      approveOrder: function() {
        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/approve',
          method: 'PATCH',
          dataType: 'json',
        }).done(function(data) {
          that.$store.commit('setupSalesOrder', { sales_order: data.sales_order })
        })
      },
      finalizeOrder: function() {
        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/finalize',
          method: 'PATCH',
          dataType: 'json',
        }).done(function(data) {
          that.$store.commit('setupSalesOrder', { sales_order: data.sales_order })
        })
      },
      shipAll: function() {
        r = confirm('確定出貨?')
        if (r === false) { return }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/shipments',
          method: 'POST',
          dataType: 'json'
        }).done(function(data) {
          window.location.reload(true)
        }).fail(function(err) {
          console.log(err.responseJSON)
          alert(err.responseJSON.errors)
        })
      },
      openPickListPage: function() {
        window.open('/papers/sales_orders/pick_lists/' + this.sales_order.id)
      },
      openInvoicePage: function() {
        window.open('/papers/sales_orders/invoices/' + this.sales_order.id)
      },
      deleteShipment: function() {
        r = confirm('商品數量將會回復，確定刪除出貨?')
        if (r === false) { return }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/shipments',
          method: 'DELETE',
          dataType: 'json',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        }).done(function(data) {
          window.location.href = '/sales_orders/' + that.sales_order.id
        }).fail(function(err) {
          console.log(err.responseJSON)
          alert(err.responseJSON.errors)
        })
      },
      voidOrder: function() {
        r = confirm('作廢後商品數量將會回復，作廢後無法恢復未作廢狀態，確定作廢？')
        if (r === false) { return }

        if (this.sales_order.status !== 'fulfilled' && this.sales_order.status != 'finalized') {
          alert('Only fulfilled or finalized sales order can be voided')
          return
        }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/void',
          method: 'PATCH',
          dataType: 'json',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        }).done(function(data) {
          window.location.href = '/sales_orders/' + that.sales_order.id
        }).fail(function(err) {
          console.log(err.responseJSON)
          alert(err.responseJSON.errors)
        })
      },
      deleteOrder: function() {
        r = confirm('確定刪除？')
        if (r === false) { return }

        if (this.sales_order.status !== 'draft' && this.sales_order.status != 'active') {
          alert('Only draft or active sales order can be deleted')
          return
        }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id,
          method: 'DELETE',
          dataType: 'json',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        }).done(function(data) {
          window.location.href = '/sales_orders/' + that.sales_order.id
        }).fail(function(err) {
          console.log(err.responseJSON)
          alert(err.responseJSON.errors)
        })
      },
      editOrder: function() {
        window.location.href = '/sales_orders/' + this.sales_order.id + '/edit'
      },
      updateOrder: function() {
        this.$store.commit('validateForm')
        if (!this.$store.state.is_form_valid) { return }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id,
          method: 'PATCH',
          dataType: 'json',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          data: { sales_order: that.$store.state.sales_order, sales_order_line_items: that.$store.state.sales_order_line_items }
        }).done(function(data) {
          window.location.href = '/sales_orders/' + data.sales_order.id
        }).fail(function(err) {
          console.log(err)
          alert('Cannot edit sales order')
        })
      },
      getPaymentTermList: function() {
        var that = this
        $.ajax({
          url: '/api/v1/payment_terms',
          method: 'GET',
          dataType: 'json',
        }).done(function(data) {
          that.options.payment_terms = data.payment_terms
          // 自動選取收款條件為預設收款條件
          that.options.payment_terms.forEach(function(payment_term) {
            if (payment_term.default) {
              that.invoice.payment_term_id = payment_term.id
              that.invoice.invoiced_on = moment().format('YYYY-MM-DD')
              if (payment_term.start_from === 'invoice_date') {
                that.invoice.due_on = moment(that.invoice.invoiced_on, 'YYYY-MM-DD').add(payment_term.due_in_days, 'days').format('YYYY-MM-DD')
              }
              else if (payment_term.start_from === 'end_of_month') {
                // 若根據 payment_term 算出來的付款時間超過下個月底 (可能發生在一月時使用NET30，因為2月只有28天，所以計算起來會超過 2/28)
                var end_of_next_month = moment().add(1, 'month').endOf('month')
                var expected_delivery_date = moment().endOf('month').add(payment_term.due_in_days, 'days')
                var due_on = expected_delivery_date.isAfter(end_of_next_month) ? end_of_next_month : expected_delivery_date
                that.invoice.due_on = due_on.format('YYYY-MM-DD')
              }
            }
          })
        })
      },
      invoiceAll: function() {
        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/invoices',
          method: 'POST',
          dataType: 'json',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          data: { invoice: that.invoice }
        }).done(function(data) {
          window.location.reload(true)
        }).fail(function(err) {
          console.log(err)
          alert(err.responseJSON)
        })
      },
      getInvoices: function() {
        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order_id + '/invoices',
          method: 'GET',
          dataType: 'json'
        }).done(function(data) {
          that.$store.commit('updateInvoices', data.invoices)
        })
      },
      deleteInvoice: function(invoice_id) {
        if (this.any_payment_exists) {
          r = confirm('收款單將會一併刪除，確定要刪除請款單？')
          if (r === false) { return }
        }
        else {
          r = confirm('確定刪除?')
          if (r === false) { return }
        }

        var that = this
        $.ajax({
          url: '/api/v1/invoices/' + invoice_id,
          method: 'DELETE',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          dataType: 'json'
        }).done(function(data) {
          window.location.reload(true)
        }).fail(function(err) {
          console.log(err)
          alert(err.responseJSON.errors)
        })
      },
      getPaymentMethodList: function() {
        var that = this
        $.ajax({
          url: '/api/v1/payment_methods',
          method: 'GET'
        }).done(function(data) {
          that.options.payment_methods = data.payment_methods
          that.options.payment_methods.forEach(function(payment_method) {
            if (payment_method.default) {
              that.payment.payment_method_id = payment_method.id
            }
          })
        })
      },
      getPayments: function() {
        if (!this.sales_order.id) { return }

        var that = this
        $.ajax({
          url: '/api/v1/sales_orders/' + that.sales_order.id + '/payments',
          method: 'GET'
        }).done(function(data) {
          that.payments = data.payments
        }).fail(function(err) {
          console.log(err)
        })
      },
      createPayment: function() {
        var that = this
        $.ajax({
          url: '/api/v1/invoices/' + that.invoices[0].id + '/payments',
          method: 'POST',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          dataType: 'json',
          data: { payment: that.payment }
        }).done(function(data) {
          window.location.reload(true)
        }).fail(function(err) {
          console.log(err)
          alert(err.responseJSON)
        })
      },
      deletePayment: function(payment_id) {
        r = confirm('確認刪除？')
        if (r === false) {
          return
        }

        var that = this
        $.ajax({
          url: '/api/v1/payments/' + payment_id,
          method: 'DELETE',
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          dataType: 'json'
        }).done(function(data) {
          window.location.reload(true)
        }).fail(function(err) {
          console.log(err)
          alert(err.responseJSON.errors)
        })
      }
    }
  })
</script>
